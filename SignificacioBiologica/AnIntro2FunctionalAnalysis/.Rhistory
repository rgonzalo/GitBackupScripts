x1<- AvsB <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
x2<- AvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
x3<- BvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_BvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
head(x1)
listOfTables <- list(AvsB = topTab_AvsB, AvsL = topTab_AvsL, BvsL = topTab_BvsL)
topTab <- listOfTables[[i]]
head(topTab)
listOfTables <- list(AvsB = AvsB, AvsL = AvsL, BvsL = BvsL)
topTab <- listOfTables[[i]]
head(topTab)
allMyGenes<-topTab$P.Value
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
head(allMyGenes)
names(allMyGenes)<-rownames(topTab)
head(allMyGenes)
names(allMyGenes)<-rownames(topTab)
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
bioCifnot(c("hgu133a.db"))
allMyGenes<-topTab$P.Value
names(allMyGenes)<-rownames(topTab)
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
Myenrichment_Fisher <- runTest(myGOData, algorithm= "classic", statistic="fisher")
Myenrichment_Fisher
summary(Myenrichment_Fisher)
enrich_table <-GenTable(myGOData, classicFisher=Myenrichment_Fisher,topNodes = 20)
head(enrich_table) # get the enrichment results as table
print(head(summary(GOhyper)))
topGOfilename =file.path(resultsDir,
paste("topGOResults.",comparison,".html", sep=""))
htmlReport(enrich_table, file = topGOfilename, summary.args=list("htmlLinks"=TRUE))
hwrite(enrich_table, file = topGOfilename)
require(hwriter)
hwrite(enrich_table, file = topGOfilename)
hwriter:::showExample()
openVignette()
require(R2HTML)
installifnot("R2HTML")
showSigOfNodes(myGOData, score(Myenrichment_Fisher), firstSigNodes=5, useInfo="all")
SO <- version[["os"]]
mainDir <-getwd()
workingDir <- mainDir
dataDir <-file.path(mainDir, "dades")
topTabsDir <- file.path(workingDir, "topTables")
codeDir <-  file.path(workingDir, "Rcode")
resultsDir <- file.path(workingDir, "results")
installifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
install.packages(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
bioCifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
source("http://bioconductor.org/biocLite.R")
biocLite(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
installifnot("knitr")
installifnot("gdata")
installifnot("hwriter")
installifnot("R2HTML")
# installifnot("readxl")
installifnot("VennDiagram")
bioCifnot("org.Hs.eg.db")
# bioCifnot(c("gage"))
# bioCifnot(c("gageData"))
# bioCifnot(c("pathview"))
bioCifnot(c("GO.db"))
bioCifnot(c("topGO"))
# require(printr)
x1<- AvsB <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
x2<- AvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
x3<- BvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_BvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
cat("\nHeader of top Table for comparison AvsB\n")
head(x1[1:10, 1:5])
cat("\nHeader of top Table for comparison AvsL\n")
head(x2[1:10, 1:5])
cat("\nHeader of top Table for comparison BvsL\n")
head(x3[1:10, 1:5])
source ("https://raw.githubusercontent.com/alexsanchezpla/scripts/master/Gene_List_Management/genesFromTopTable.R")
source ("https://raw.githubusercontent.com/alexsanchezpla/scripts/master/Gene_List_Management/extractInfoFromTopTable.R")
List_AvsB <- List1 <- extractInfo(x1, "AvsB", "A|B", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList1 <-List1[[2]]; geneList1<- List1[[1]];
cat("\nNumber of genes selectable (AvsB) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList1))
List_AvsL <- List2 <- extractInfo(x2, "AvsL", "A|L", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList2 <-List2[[2]]; geneList2<- List2[[1]];
cat("\nNumber of genes selectable (AvsL) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList2))
List_BvsL <- List3 <- extractInfo(x3, "BvsL", "B|L", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList3 <-List3[[2]]; geneList3<- List3[[1]];
cat("\nNumber of genes selectable (BvsL) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList3))
# test
# pattern  <- "WL|PS"; cols2select<- grep(pattern, colnames(x1)); colnames(x1)[cols2select]
# pattern  <- "WL\\.M|PS\\.M"; cols2select<- grep(pattern, colnames(x1M)); colnames(x1M)[cols2select]
# pattern  <- "WL\\.F|PS\\.F"; cols2select<- grep(pattern, colnames(x1F)); colnames(x1F)[cols2select]
require(VennDiagram)
vd2<- venn.diagram(list(AvsB=geneList1, AvsL=geneList2,  BvsL=geneList3), filename=NULL)
grid.draw(vd2)
dev.off()
require(GOstats)
listOfLists <- list(AvsB = List_AvsB, AvsL = List_AvsL, BvsL = List_BvsL)
listsOfResults <- list(GOResults=list(), KEGGResults=list())
for (i in 1:length(listOfLists)){
# Seleccionamos las listas para el análisis
comparison = names(listOfLists)[i]
myLists <- listOfLists[[i]]
entrezUniverse <-  myLists[[2]]
geneIds <-   myLists[[1]]
# Creamos los "hiperparámetros" en que se basa el análisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
KEGGparams = new("KEGGHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los análisis
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
cat("\nComparison: ", comparison,"\n")
cat("GO\n")
print(head(summary(GOhyper)))
cat("KEGG\n")
print(head(summary(KEGGhyper)))
# Guardamos los resultados para comparacioens posteriores
#  listsOfResults[[i]][["GOResults"]]<- GOhyper
#  listsOfResults[[i]][["GOResults"]]<- KEGGhyper
#  names(listsOfResults)[i] <- comparison
# Creamos un informe html con los resultados
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
KEGGfilename =file.path(resultsDir,
paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
listOfTables <- list(AvsB = AvsB, AvsL = AvsL, BvsL = BvsL)
listOfTopGOResults <- list(GOdatas=list(), Enrichs=list())
i<- 1
comparison = names(listOfTables)[i]
topTab <- listOfTables[[i]]
# Creamos los "hiperparámetros" en que se basa el análisis
allMyGenes<-topTab$P.Value
names(allMyGenes)<-rownames(topTab)
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
require(topGO)
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
topDiffGenes <- function(allScore) {
return(allScore < 0.05)
}
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
bioCifnot(c("hgu133a.db"))
require(topGO)
require(hwriter)
allMyGenes<-topTab$P.Value
names(allMyGenes)<-rownames(topTab)
topDiffGenes <- function(allScore) {
return(allScore < 0.05)
}
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
# Ejecutamos los análisis
Myenrichment_Fisher <- runTest(myGOData, algorithm= "classic", statistic="fisher")
Myenrichment_Fisher
enrich_table <-GenTable(myGOData, classicFisher=Myenrichment_Fisher,
topNodes = 20)
head(enrich_table) # get the enrichment results as table
listOfTopGOResults[[i]][["GOdata"]]<- GOData
listOfTopGOResults[[i]][["GOdata"]]<- GOdata
listOfTopGOResults[[i]][["GOdata"]]<-   myGOData
listOfTopGOResults[[i]][["Enrichs"]] <- enrich_table
HTMLStart(outdir="resultsDir", file=paste("topGOResults.",comparison, sep=""),
extension="html", echo=FALSE, HTMLframe=TRUE)
HTML.title("Enrichment Analysis with topGO", HR=1)
require(R2HTML)
HTMLStart(outdir="resultsDir", file=paste("topGOResults.",comparison, sep=""),
extension="html", echo=FALSE, HTMLframe=TRUE)
HTMLStart(outdir="resultsDir", paste("topGOResults.",comparison, sep=""),
extension="html", echo=FALSE, HTMLframe=TRUE)
paste("topGOResults.",comparison, sep="")
write.table(enrich_table, file=paste("topGOResults.",comparison, "html", sep="."))
HTMLStop()
HTMLStop()
HTMLStop()
HTMLStop()
x <- 1
y<- 2
x+y
HTMLStop()
SO <- version[["os"]]
mainDir <-getwd()
workingDir <- mainDir
dataDir <-file.path(mainDir, "dades")
topTabsDir <- file.path(workingDir, "topTables")
codeDir <-  file.path(workingDir, "Rcode")
resultsDir <- file.path(workingDir, "results")
workingDir
installifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
install.packages(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
bioCifnot <- function (packageName){
if (!(require(packageName, character.only=TRUE))) {
source("http://bioconductor.org/biocLite.R")
biocLite(packageName)
}else{
detach(paste ("package", packageName, sep=":"), character.only=TRUE)
}
}
installifnot("knitr")
installifnot("gdata")
installifnot("hwriter")
installifnot("R2HTML")
# installifnot("readxl")
installifnot("VennDiagram")
bioCifnot("org.Hs.eg.db")
# bioCifnot(c("gage"))
# bioCifnot(c("gageData"))
# bioCifnot(c("pathview"))
bioCifnot(c("GO.db"))
bioCifnot(c("topGO"))
bioCifnot(c("KEGG.db"))
bioCifnot(c("hgu133a.db"))
bioCifnot(c("GOstats"))
# bioCifnot(c("FGNet"))
# bioCifnot(c("RDAVIDWebService"))
bioCifnot(c("goProfiles"))
if(!(require(printr))) {
install.packages(
'printr',
type = 'source',
repos = c('http://yihui.name/xran', 'http://cran.rstudio.com')
)
}
# require(printr)
x1<- AvsB <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsB.csv2"), head=T, sep=";", dec=",", row.names=1)
x2<- AvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_AvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
x3<- BvsL <- read.table(file.path(topTabsDir, "ExpressAndTop_BvsL.csv2"), head=T, sep=";", dec=",", row.names=1)
cat("\nHeader of top Table for comparison AvsB\n")
head(x1[1:10, 1:5])
cat("\nHeader of top Table for comparison AvsL\n")
head(x2[1:10, 1:5])
cat("\nHeader of top Table for comparison BvsL\n")
head(x3[1:10, 1:5])
source ("https://raw.githubusercontent.com/alexsanchezpla/scripts/master/Gene_List_Management/genesFromTopTable.R")
source ("https://raw.githubusercontent.com/alexsanchezpla/scripts/master/Gene_List_Management/extractInfoFromTopTable.R")
List_AvsB <- List1 <- extractInfo(x1, "AvsB", "A|B", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList1 <-List1[[2]]; geneList1<- List1[[1]];
cat("\nNumber of genes selectable (AvsB) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList1))
List_AvsL <- List2 <- extractInfo(x2, "AvsL", "A|L", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList2 <-List2[[2]]; geneList2<- List2[[1]];
cat("\nNumber of genes selectable (AvsL) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList2))
List_BvsL <- List3 <- extractInfo(x3, "BvsL", "B|L", resultsDir, adjOrraw="adj", pCutOff=0.1, fcCutoff=.75);
universeList3 <-List3[[2]]; geneList3<- List3[[1]];
cat("\nNumber of genes selectable (BvsL) with adjusted p-value < 0.1 and logFC > 0.75:\t", length(geneList3))
# test
# pattern  <- "WL|PS"; cols2select<- grep(pattern, colnames(x1)); colnames(x1)[cols2select]
# pattern  <- "WL\\.M|PS\\.M"; cols2select<- grep(pattern, colnames(x1M)); colnames(x1M)[cols2select]
# pattern  <- "WL\\.F|PS\\.F"; cols2select<- grep(pattern, colnames(x1F)); colnames(x1F)[cols2select]
htmlReport
require(topGO)
listOfTables <- list(AvsB = AvsB, AvsL = AvsL, BvsL = BvsL)
listOfTopGOResults <- list(GOdatas=list(), Enrichs=list())
i<-1
comparison = names(listOfTables)[i]
comparison
topTab <- listOfTables[[i]]
allMyGenes<-topTab$P.Value
names(allMyGenes)<-rownames(topTab)
topDiffGenes <- function(allScore) {
return(allScore < 0.05)
}
myGOData <- new("topGOdata", ontology="BP",
allGenes=allMyGenes,
geneSel=topDiffGenes, nodeSize=10,
annot= annFUN.db, affyLib="hgu133a.db")
Myenrichment_Fisher <- runTest(myGOData, algorithm= "classic", statistic="fisher")
# Myenrichment_Fisher
enrich_table <-GenTable(myGOData, classicFisher=Myenrichment_Fisher,
topNodes = 20)
head(enrich_table) # get the enrichment results as table
# Guardamos los resultados para comparacioens posteriores
listOfTopGOResults[[i]][["GOdata"]]  <- myGOData
listOfTopGOResults[[i]][["Enrichs"]] <- enrich_table
HTMLStart(outdir="resultsDir",
filename=paste("topGOResults.",comparison, sep=""), extension="html",
echo=FALSE, HTMLframe=TRUE)
require(R2HTML)
HTMLStart(outdir="resultsDir",
filename=paste("topGOResults.",comparison, sep=""), extension="html",
echo=FALSE, HTMLframe=TRUE)
HTML.title("Enrichment Analysis with topGO", HR=1)
HTML.title(paste("Comparison:", comparison), HR=3)
enrich_table
HTMLStop()
dir.create(file.path("resultsDir","R2HTML"))
resultsDir
dir.create(file.path("~","R2HTML"))
HTMLStart(outdir="~",
filename=paste("topGOResults.",comparison, sep=""), extension="html",
echo=FALSE, HTMLframe=TRUE)
HTML.title("Enrichment Analysis with topGO", HR=1)
HTML.title(paste("Comparison:", comparison), HR=3)
enrich_table
HTMLStop()
fileName0<- file.path("~", paste(baseFileName, "html", sep="."))
baseFileName <- paste("topGOResults", comparison, sep=".")
fileName0<- file.path("~", paste(baseFileName, "html", sep="."))
fileName0
fileName1<- file.path(resultsDir, paste(baseFileName, "html", sep="."))
fileName1
baseFileName <- paste("topGOResults", comparison, sep=".")
HTMLStart(outdir="~", filename=baseFileName, extension="html",
echo=FALSE, HTMLframe=TRUE)
HTML.title("Enrichment Analysis with topGO", HR=1)
HTML.title(paste("Comparison:", comparison), HR=3)
enrich_table
HTMLStop()
fileName0<- file.path("~", paste(baseFileName, "html", sep="."))
fileName1<- file.path(resultsDir, paste(baseFileName, "html", sep="."))
file.copy(from = fileName0, to = fileName1)
GOData <-listOfTopGOResults[[i]][["GOdata"]]
anEnrichment <- listOfTopGOResults[[i]][["Enrichs"]]
showSigOfNodes(aGOData, score(anEnrichment), firstSigNodes=5, useInfo="all")
require(topGO)
listOfTopGOResults[[i]][["Enrichs"]] <- enrich_table
listOfTopGOResults[[i]][["Enrichs"]] <- Myenrichment_Fisher
anEnrichment <- listOfTopGOResults[[i]][["Enrichs"]]
showSigOfNodes(aGOData, score(anEnrichment), firstSigNodes=5, useInfo="all")
aGOData <-listOfTopGOResults[[i]][["GOdata"]]
anEnrichment <- listOfTopGOResults[[i]][["Enrichs"]]
showSigOfNodes(aGOData, score(anEnrichment), firstSigNodes=5, useInfo="all")
graphFileName <- file.path(resultsDir, paste("topGOResults", comparison, "pdf", sep="."))
graphFileName
summary1<-summary(listsOfResults[[1]][["GOResults"]] )
require(GOstats)
listOfLists <- list(AvsB = List_AvsB, AvsL = List_AvsL, BvsL = List_BvsL)
listsOfResults <- list(GOResults=list(), KEGGResults=list())
for (i in 1:length(listOfLists)){
# Seleccionamos las listas para el an?lisis
comparison = names(listOfLists)[i]
myLists <- listOfLists[[i]]
entrezUniverse <-  myLists[[2]]
geneIds <-   myLists[[1]]
# Creamos los "hiperpar?metros" en que se basa el an?lisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
KEGGparams = new("KEGGHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los an?lisis
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
cat("\nComparison: ", comparison,"\n")
cat("GO\n")
print(head(summary(GOhyper)))
cat("KEGG\n")
print(head(summary(KEGGhyper)))
# Guardamos los resultados para comparacioens posteriores
listsOfResults[[i]][["GOResults"]]<- GOhyper
listsOfResults[[i]][["KEGG"]]<- KEGGhyper
names(listsOfResults)[i] <- comparison
# Creamos un informe html con los resultados
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
KEGGfilename =file.path(resultsDir,
paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
names(listsOfResults)
require(GOstats)
source(file.path(codeDir, "hiperGeometricAnalysisFunctions.R"))
classicalEnrichment <- function (aGeneList, aGeneUniverse, aCompName, aCutoff, anAnotPackage, anOutDir){
hg1 <- newHyperPar(geneList=aGeneList, geneUniverse=aGeneUniverse,
anotPackage=anAnotPackage, sourceOnto="GO",
pValueCutoff=aCutoff, fileName=paste("hyperGTest", aCompName,sep="."))
hg2 <- newHyperPar(geneList=aGeneList, geneUniverse=aGeneUniverse,
anotPackage=anAnotPackage, sourceOnto="KEGG",
pValueCutoff=aCutoff, , fileName=paste("hyperGTest", aCompName,sep="."))
hiperGeometricAnalysis (hg1, outDir=anOutDir)
hiperGeometricAnalysis (hg2, outDir=anOutDir)
}
classicalEnrichment (geneList1, universeList1, "AvsB", 0.01  , "org.Hs.eg.db", resultsDir)
classicalEnrichment (geneList2, universeList2, "AvsL", 0.01  , "org.Hs.eg.db", resultsDir)
classicalEnrichment (geneList3, universeList3, "BvsL", 0.05  , "org.Hs.eg.db", resultsDir)
require(GOstats)
listOfLists <- list(AvsB = List_AvsB, AvsL = List_AvsL, BvsL = List_BvsL)
listsOfResults <- list(GOResults=list(), KEGGResults=list())
for (i in 1:length(listOfLists)){
# Seleccionamos las listas para el an?lisis
comparison = names(listOfLists)[i]
myLists <- listOfLists[[i]]
entrezUniverse <-  myLists[[2]]
geneIds <-   myLists[[1]]
# Creamos los "hiperpar?metros" en que se basa el an?lisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
KEGGparams = new("KEGGHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los an?lisis
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
cat("\nComparison: ", comparison,"\n")
cat("GO\n")
print(head(summary(GOhyper)))
cat("KEGG\n")
print(head(summary(KEGGhyper)))
# Guardamos los resultados para comparacioens posteriores
if(!is.null(GOhyper)){
listsOfResults[[i]][["GOResults"]]<- GOhyper
}else{
listsOfResults[[i]][["GOResults"]]<-NULL
}
if(!is.null(KEGGhyper)){
listsOfResults[[i]][["KEGGResults"]]<- KEGGhyper
}else{
listsOfResults[[i]][["KEGGResults"]]<-NULL
}
names(listsOfResults)[i] <- comparison
# Creamos un informe html con los resultados
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
KEGGfilename =file.path(resultsDir,
paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
require(GOstats)
listOfLists <- list(AvsB = List_AvsB, AvsL = List_AvsL, BvsL = List_BvsL)
listsOfResults <- list(GOResults=list(), KEGGResults=list())
for (i in 1:length(listOfLists)){
# Seleccionamos las listas para el an?lisis
comparison = names(listOfLists)[i]
myLists <- listOfLists[[i]]
entrezUniverse <-  myLists[[2]]
geneIds <-   myLists[[1]]
# Creamos los "hiperpar?metros" en que se basa el an?lisis
GOparams = new("GOHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db", ontology="BP",
pvalueCutoff=0.001, conditional=FALSE,
testDirection="over")
KEGGparams = new("KEGGHyperGParams",
geneIds=geneIds, universeGeneIds=entrezUniverse,
annotation="org.Hs.eg.db",
pvalueCutoff=0.01, testDirection="over")
# Ejecutamos los an?lisis
GOhyper = hyperGTest(GOparams)
KEGGhyper = hyperGTest(KEGGparams)
cat("\nComparison: ", comparison,"\n")
cat("GO\n")
print(head(summary(GOhyper)))
cat("KEGG\n")
print(head(summary(KEGGhyper)))
# Guardamos los resultados para comparacioens posteriores
if(!is.null(GOhyper)){
listsOfResults[[i]][["GOResults"]]<- GOhyper
}else{
listsOfResults[[i]][["GOResults"]]<-NULL
}
if(!is.null(KEGGhyper)){
listsOfResults[[i]][["KEGGResults"]]<- KEGGhyper
}else{
listsOfResults[[i]][["KEGGResults"]]<-NULL
}
#names(listsOfResults)[i] <- comparison
# Creamos un informe html con los resultados
GOfilename =file.path(resultsDir,
paste("GOResults.",comparison,".html", sep=""))
KEGGfilename =file.path(resultsDir,
paste("KEGGResults.",comparison,".html", sep=""))
htmlReport(GOhyper, file = GOfilename, summary.args=list("htmlLinks"=TRUE))
htmlReport(KEGGhyper, file = KEGGfilename, summary.args=list("htmlLinks"=TRUE))
}
length(listOfLists)
